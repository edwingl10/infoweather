{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","locationText","data","city","country","divStyle","display","className","style","icon","temperature","min","max","minmaxTemp","temp_min","temp_max","description","FormComponent","role","error","onSubmit","loadWeather","type","name","placeholder","value","App","state","undefined","main","weatherIcon","thunderStorm","drizzle","rain","snow","atmosphere","clear","clouds","getWeather","bind","rangeId","this","kelvin","Math","floor","event","preventDefault","target","elements","fetch","then","response","json","cod","setState","message","sys","getFarenheit","temp","weather","getWeatherIcon","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d76c5d1.chunk.js","sourcesContent":["import React from 'react';\nimport './weather.style.css';\n\n\nfunction Weather(props){\n    const locationText = props.data.city&&props.data.country?`${props.data.city}, ${props.data.country}`:\"\";\n    const divStyle = locationText===\"\"?{display:\"none\"}:{display:\"block\"};\n    return(\n        <div className=\"container\" style={divStyle}>\n            <h1>{locationText}</h1>\n            <p>\n                <i className={`wi ${props.data.icon} big`} />\n            </p>\n            {props.data.temperature? (<h1>{props.data.temperature}&#8457;</h1>): \"\"}\n\n            {minmaxTemp(props.data.temp_min,props.data.temp_max)}\n\n            <h2>{props.data.description}</h2>\n            \n        </div>\n    );\n}\n\nfunction minmaxTemp(min, max){\n    if(min && max){\n        return(\n            <h2>\n                <span className=\"minmax\">min: {min}&#8457;</span>  \n                <span className=\"minmax\">max: {max}&#8457;</span>\n            </h2>\n        );\n    }\n\n}\n\nexport default Weather;","import React from 'react';\nimport './form.style.css';\n\nfunction FormComponent(props){\n    return(\n        <div>\n            <h1 className=\"title\">Info Weather</h1>\n            <p className=\"desc\">Welcome to Info Weather. Enter a City and Country and find out the weather there!</p>\n            <h2 className=\"error\" role=\"alert\">{props.error}</h2>\n            \n            <form onSubmit={props.loadWeather}>\n                <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\"/>\n                <input type=\"text\" className=\"form-control\" name=\"country\" placeholder=\"Country\"/>\n                <input type=\"submit\" name=\"submit\" value=\"Get Weather\"  className=\"send-bttn\"/>\n            </form>\n            \n        </div>\n    );\n}\n\n\nexport default FormComponent;","import React from 'react';\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport FormComponent from './app_component/form.component';\nimport \"weather-icons/css/weather-icons.css\";\n\n//api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_Key = \"605ee4065adafbe0c4eb021bb1af6796\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      temperature:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description: undefined,\n      error: undefined\n    };\n    \n    this.weatherIcon = {\n      thunderStorm: \"wi-thunderstorm\",\n      drizzle:\"wi-sleet\",\n      rain:\"wi-storm-showers\",\n      snow:\"wi-snow\",\n      atmosphere:\"wi-fog\",\n      clear:\"wi-day-sunny\",\n      clouds:\"wi-day-fog\"\n    };\n\n    this.getWeather = this.getWeather.bind(this);\n  }\n\n\n\n  getWeatherIcon(rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n        return this.weatherIcon.thunderStorm;\n\n      case rangeId >= 300 && rangeId <= 321:\n        return this.weatherIcon.drizzle;\n\n      case rangeId >= 500 && rangeId <= 531:\n        return this.weatherIcon.rain;\n\n      case rangeId >= 600 && rangeId <= 622:\n        return this.weatherIcon.snow;\n        \n      case rangeId >= 701 && rangeId <= 781:\n        return this.weatherIcon.atmosphere;\n        \n      case rangeId === 800:\n        return this.weatherIcon.clear;\n       \n      case rangeId >= 801 && rangeId <= 804:\n        return this.weatherIcon.clouds;\n        \n      default:\n        return this.weatherIcon.clouds;\n    }\n  }\n\n  getFarenheit(kelvin){\n    return Math.floor((kelvin-273.15)*9/5+32);\n  }\n\n  getWeather(event){\n    event.preventDefault();\n\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value\n\n    if(city && country){\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`)\n      .then(response=>response.json())\n      .then((response)=>{\n        if(response.cod ===\"404\"){\n          this.setState({error:response.message});\n        }\n        else{\n          this.setState({\n            city: response.name,\n            country: response.sys.country,\n            temperature: this.getFarenheit(response.main.temp),\n            temp_max: this.getFarenheit(response.main.temp_max),\n            temp_min: this.getFarenheit(response.main.temp_min),\n            description: response.weather[0].description,\n            icon: this.getWeatherIcon(response.weather[0].id),\n            error: \"\"\n          });\n        }\n      });\n      \n    }\n    else{\n      this.setState({error:\"Please enter City and Country\"});\n    }\n\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <FormComponent loadWeather={this.getWeather} error={this.state.error}/>\n        <Weather data={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}